{"version":3,"file":"BuildFunction.js","sourceRoot":"","sources":["../src/BuildFunction.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAG5B,iDAA8D;AAQ9D,MAAa,aAAa;IAWjB,MAAM,CAAC,mBAAmB,CAAC,MAAc;QAC9C,OAAO,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,YAAY,EACV,SAAS,EACT,EAAE,EACF,IAAI,EACJ,yBAAyB,EACzB,cAAc,EACd,eAAe,EACf,OAAO,EACP,EAAE,EACF,KAAK,GAWN;QACC,IAAA,gBAAM,EAAC,OAAO,KAAK,SAAS,IAAI,EAAE,KAAK,SAAS,EAAE,uCAAuC,CAAC,CAAC;QAC3F,IAAA,gBAAM,EAAC,CAAC,CAAC,OAAO,KAAK,SAAS,IAAI,EAAE,KAAK,SAAS,CAAC,EAAE,oCAAoC,CAAC,CAAC;QAE3F,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;IACjF,CAAC;IAEM,+BAA+B,CACpC,GAAqB,EACrB,EACE,EAAE,EACF,IAAI,EACJ,UAAU,GAAG,EAAE,EACf,gBAAgB,EAChB,KAAK,MAOH,EAAE;;QAEN,MAAM,WAAW,GAAG,wBAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3C,MAAM,aAAa,GAAG,IAAI,aAAJ,IAAI,cAAJ,IAAI,GAAI,IAAI,CAAC,IAAI,CAAC;QACxC,MAAM,oBAAoB,GAAG,wBAAS,CAAC,cAAc,CAAC;YACpD,EAAE,EAAE,WAAW;YACf,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,IAAI,EAAE,aAAa;SACpB,CAAC,CAAC;QAEH,MAAM,MAAM,GAAG,MAAA,IAAI,CAAC,cAAc,0CAAE,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE;YACxD,MAAM,KAAK,GAAG,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;YAC9C,IAAI,KAAK,CAAC,EAAE,IAAI,UAAU,EAAE;gBAC1B,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC;aACjC;YACD,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,MAAA,IAAI,CAAC,eAAe,0CAAE,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC;QAEhG,OAAO,IAAI,wBAAS,CAAC,GAAG,EAAE;YACxB,EAAE,EAAE,WAAW;YACf,IAAI,EAAE,aAAa;YACnB,WAAW,EAAE,oBAAoB;YACjC,OAAO,EAAE,IAAI,CAAC,OAAO;YACrB,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,gBAAgB;YAChB,MAAM;YACN,OAAO;YACP,KAAK;YACL,yBAAyB,EAAE,IAAI,CAAC,yBAAyB;SAC1D,CAAC,CAAC;IACL,CAAC;CACF;AApGD,sCAoGC","sourcesContent":["import assert from 'assert';\n\nimport { BuildRuntimePlatform } from './BuildRuntimePlatform.js';\nimport { BuildStep, BuildStepFunction } from './BuildStep.js';\nimport { BuildStepContext } from './BuildStepContext.js';\nimport { BuildStepInputProvider, BuildStepInputValueType } from './BuildStepInput.js';\nimport { BuildStepOutputProvider } from './BuildStepOutput.js';\n\nexport type BuildFunctionById = Record<string, BuildFunction>;\nexport type BuildFunctionCallInputs = Record<string, BuildStepInputValueType>;\n\nexport class BuildFunction {\n  public readonly namespace?: string;\n  public readonly id: string;\n  public readonly name?: string;\n  public readonly supportedRuntimePlatforms?: BuildRuntimePlatform[];\n  public readonly inputProviders?: BuildStepInputProvider[];\n  public readonly outputProviders?: BuildStepOutputProvider[];\n  public readonly command?: string;\n  public readonly fn?: BuildStepFunction;\n  public readonly shell?: string;\n\n  public static isFulldIdNamespaced(fullId: string): boolean {\n    return fullId.includes('/');\n  }\n\n  constructor({\n    namespace,\n    id,\n    name,\n    supportedRuntimePlatforms,\n    inputProviders,\n    outputProviders,\n    command,\n    fn,\n    shell,\n  }: {\n    namespace?: string;\n    id: string;\n    name?: string;\n    supportedRuntimePlatforms?: BuildRuntimePlatform[];\n    inputProviders?: BuildStepInputProvider[];\n    outputProviders?: BuildStepOutputProvider[];\n    command?: string;\n    fn?: BuildStepFunction;\n    shell?: string;\n  }) {\n    assert(command !== undefined || fn !== undefined, 'Either command or fn must be defined.');\n    assert(!(command !== undefined && fn !== undefined), 'Command and fn cannot be both set.');\n\n    this.namespace = namespace;\n    this.id = id;\n    this.name = name;\n    this.supportedRuntimePlatforms = supportedRuntimePlatforms;\n    this.inputProviders = inputProviders;\n    this.outputProviders = outputProviders;\n    this.command = command;\n    this.fn = fn;\n    this.shell = shell;\n  }\n\n  public getFullId(): string {\n    return this.namespace === undefined ? this.id : `${this.namespace}/${this.id}`;\n  }\n\n  public createBuildStepFromFunctionCall(\n    ctx: BuildStepContext,\n    {\n      id,\n      name,\n      callInputs = {},\n      workingDirectory,\n      shell,\n    }: {\n      id?: string;\n      name?: string;\n      callInputs?: BuildFunctionCallInputs;\n      workingDirectory?: string;\n      shell?: string;\n    } = {}\n  ): BuildStep {\n    const buildStepId = BuildStep.getNewId(id);\n    const buildStepName = name ?? this.name;\n    const buildStepDisplayName = BuildStep.getDisplayName({\n      id: buildStepId,\n      command: this.command,\n      name: buildStepName,\n    });\n\n    const inputs = this.inputProviders?.map((inputProvider) => {\n      const input = inputProvider(ctx, buildStepId);\n      if (input.id in callInputs) {\n        input.set(callInputs[input.id]);\n      }\n      return input;\n    });\n    const outputs = this.outputProviders?.map((outputProvider) => outputProvider(ctx, buildStepId));\n\n    return new BuildStep(ctx, {\n      id: buildStepId,\n      name: buildStepName,\n      displayName: buildStepDisplayName,\n      command: this.command,\n      fn: this.fn,\n      workingDirectory,\n      inputs,\n      outputs,\n      shell,\n      supportedRuntimePlatforms: this.supportedRuntimePlatforms,\n    });\n  }\n}\n"]}