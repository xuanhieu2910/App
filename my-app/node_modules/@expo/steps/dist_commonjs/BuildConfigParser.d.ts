import { BuildFunction } from './BuildFunction.js';
import { BuildStepContext } from './BuildStepContext.js';
import { BuildWorkflow } from './BuildWorkflow.js';
export declare class BuildConfigParser {
    private readonly ctx;
    private readonly configPath;
    private readonly externalFunctions?;
    constructor(ctx: BuildStepContext, { configPath, externalFunctions }: {
        configPath: string;
        externalFunctions?: BuildFunction[];
    });
    parseAsync(): Promise<BuildWorkflow>;
    private createBuildStepFromConfig;
    private createBuildStepFromBuildStepCommandRun;
    private createBuildStepFromBuildStepBareCommandRun;
    private createBuildStepFromBuildStepBareFunctionCall;
    private createBuildStepFromBuildStepFunctionCall;
    private createBuildFunctionsFromConfig;
    private createBuildFunctionFromConfig;
    private createBuildStepInputsFromDefinition;
    private createBuildStepInputProvidersFromBuildFunctionInputs;
    private createBuildStepOutputsFromDefinition;
    private createBuildStepOutputProvidersFromBuildFunctionOutputs;
    private mergeBuildFunctionsWithExternal;
    private validateExternalFunctions;
    private getExternalFunctionFullIds;
}
