"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeBuildStepInputByIdMap = exports.BuildStepInput = exports.BuildStepInputValueTypeName = void 0;
const errors_js_1 = require("./errors.cjs");
const template_js_1 = require("./utils/template.cjs");
var BuildStepInputValueTypeName;
(function (BuildStepInputValueTypeName) {
    BuildStepInputValueTypeName["STRING"] = "string";
    BuildStepInputValueTypeName["BOOLEAN"] = "boolean";
    BuildStepInputValueTypeName["NUMBER"] = "number";
})(BuildStepInputValueTypeName = exports.BuildStepInputValueTypeName || (exports.BuildStepInputValueTypeName = {}));
class BuildStepInput {
    static createProvider(params) {
        return (ctx, stepDisplayName) => new BuildStepInput(ctx, { ...params, stepDisplayName });
    }
    constructor(ctx, { id, stepDisplayName, allowedValues, defaultValue, required = true, allowedValueTypeName = BuildStepInputValueTypeName.STRING, }) {
        this.ctx = ctx;
        this.id = id;
        this.stepDisplayName = stepDisplayName;
        this.allowedValues = allowedValues;
        this.defaultValue = defaultValue;
        this.required = required;
        this.allowedValueTypeName = allowedValueTypeName;
    }
    get value() {
        var _a;
        const rawValue = (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
        if (this.required && rawValue === undefined) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" is required but it was not set.`);
        }
        if (typeof rawValue !== this.allowedValueTypeName && rawValue !== undefined) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" must be of type "${this.allowedValueTypeName}".`);
        }
        if (rawValue === undefined || typeof rawValue === 'boolean' || typeof rawValue === 'number') {
            return rawValue;
        }
        else {
            return (0, template_js_1.interpolateWithOutputs)(rawValue, (path) => { var _a; return (_a = this.ctx.getStepOutputValue(path)) !== null && _a !== void 0 ? _a : ''; });
        }
    }
    get rawValue() {
        var _a;
        return (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
    }
    set(value) {
        if (this.required && value === undefined) {
            throw new errors_js_1.BuildStepRuntimeError(`Input parameter "${this.id}" for step "${this.stepDisplayName}" is required.`);
        }
        this._value = value;
        return this;
    }
    isValueOneOfAllowedValues() {
        var _a;
        const value = (_a = this._value) !== null && _a !== void 0 ? _a : this.defaultValue;
        if (this.allowedValues === undefined || value === undefined) {
            return true;
        }
        return this.allowedValues.includes(value);
    }
}
exports.BuildStepInput = BuildStepInput;
function makeBuildStepInputByIdMap(inputs) {
    if (inputs === undefined) {
        return {};
    }
    return inputs.reduce((acc, input) => {
        acc[input.id] = input;
        return acc;
    }, {});
}
exports.makeBuildStepInputByIdMap = makeBuildStepInputByIdMap;
//# sourceMappingURL=BuildStepInput.js.map