"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildStepContext = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const template_js_1 = require("./utils/template.cjs");
const errors_js_1 = require("./errors.cjs");
class BuildStepContext {
    constructor(buildId, logger, skipCleanup, runtimePlatform, projectSourceDirectory, projectTargetDirectory, workingDirectory) {
        this.buildId = buildId;
        this.logger = logger;
        this.skipCleanup = skipCleanup;
        this.runtimePlatform = runtimePlatform;
        this.projectSourceDirectory = projectSourceDirectory;
        this.projectTargetDirectory = projectTargetDirectory;
        this.stepById = {};
        this.stepsInternalBuildDirectory = path_1.default.join(os_1.default.tmpdir(), 'eas-build', buildId);
        this.workingDirectory =
            workingDirectory !== null && workingDirectory !== void 0 ? workingDirectory : path_1.default.join(this.stepsInternalBuildDirectory, 'project');
    }
    registerStep(step) {
        this.stepById[step.id] = step;
    }
    getStepOutputValue(path) {
        const { stepId, outputId } = (0, template_js_1.parseOutputPath)(path);
        if (!(stepId in this.stepById)) {
            throw new errors_js_1.BuildStepRuntimeError(`Step "${stepId}" does not exist.`);
        }
        return this.stepById[stepId].getOutputValueByName(outputId);
    }
    child({ logger, workingDirectory, } = {}) {
        return new BuildStepContext(this.buildId, logger !== null && logger !== void 0 ? logger : this.logger, this.skipCleanup, this.runtimePlatform, this.projectSourceDirectory, this.projectTargetDirectory, workingDirectory !== null && workingDirectory !== void 0 ? workingDirectory : this.workingDirectory);
    }
}
exports.BuildStepContext = BuildStepContext;
//# sourceMappingURL=BuildStepContext.js.map