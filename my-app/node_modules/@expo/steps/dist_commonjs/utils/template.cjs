"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseOutputPath = exports.findOutputPaths = exports.interpolateWithOutputs = exports.interpolateWithInputs = exports.BUILD_STEP_OUTPUT_EXPRESSION_REGEXP = exports.BUILD_STEP_INPUT_EXPRESSION_REGEXP = void 0;
const errors_js_1 = require("../errors.cjs");
const nullthrows_js_1 = require("./nullthrows.cjs");
exports.BUILD_STEP_INPUT_EXPRESSION_REGEXP = /\${\s*inputs\.([\S]+)\s*}/;
exports.BUILD_STEP_OUTPUT_EXPRESSION_REGEXP = /\${\s*steps\.([\S]+)\s*}/;
function interpolateWithInputs(templateString, inputs) {
    return interpolate(templateString, exports.BUILD_STEP_INPUT_EXPRESSION_REGEXP, inputs);
}
exports.interpolateWithInputs = interpolateWithInputs;
function interpolateWithOutputs(templateString, fn) {
    return interpolate(templateString, exports.BUILD_STEP_OUTPUT_EXPRESSION_REGEXP, fn);
}
exports.interpolateWithOutputs = interpolateWithOutputs;
function interpolate(templateString, regex, varsOrFn) {
    const matched = templateString.match(new RegExp(regex, 'g'));
    if (!matched) {
        return templateString;
    }
    let result = templateString;
    for (const match of matched) {
        const [, key] = (0, nullthrows_js_1.nullthrows)(match.match(regex));
        const value = typeof varsOrFn === 'function' ? varsOrFn(key) : varsOrFn[key];
        result = result.replace(match, value);
    }
    return result;
}
function findOutputPaths(templateString) {
    const result = [];
    const matches = templateString.matchAll(new RegExp(exports.BUILD_STEP_OUTPUT_EXPRESSION_REGEXP, 'g'));
    for (const match of matches) {
        result.push(parseOutputPath(match[1]));
    }
    return result;
}
exports.findOutputPaths = findOutputPaths;
function parseOutputPath(outputPath) {
    const splits = outputPath.split('.');
    if (splits.length !== 2) {
        throw new errors_js_1.BuildConfigError(`Step output path must consist of two components joined with a dot, where first is the step ID, and second is the output name, e.g. "step3.output1". Passed: "${outputPath}"`);
    }
    const [stepId, outputId] = splits;
    return { stepId, outputId };
}
exports.parseOutputPath = parseOutputPath;
//# sourceMappingURL=template.js.map