{"version":3,"file":"BuildStepOutput.js","sourceRoot":"","sources":["../src/BuildStepOutput.ts"],"names":[],"mappings":";;;AACA,2CAAoD;AAiBpD,MAAa,eAAe;IAOnB,MAAM,CAAC,cAAc,CAAC,MAAqC;QAChE,OAAO,CAAC,GAAG,EAAE,eAAe,EAAE,EAAE,CAAC,IAAI,eAAe,CAAC,GAAG,EAAE,EAAE,GAAG,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC;IAC5F,CAAC;IAED;IACE,wFAAwF;IACvE,GAAqB,EACtC,EAAE,EAAE,EAAE,eAAe,EAAE,QAAQ,GAAG,IAAI,EAAyB;QAD9C,QAAG,GAAH,GAAG,CAAkB;QAGtC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,IAAW,KAAK;QACd,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,MAAM,KAAK,SAAS,EAAE;YAC9C,MAAM,IAAI,iCAAqB,CAC7B,qBAAqB,IAAI,CAAC,EAAE,eAAe,IAAI,CAAC,eAAe,mCAAmC,CACnG,CAAC;SACH;QACD,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAEM,GAAG,CAAC,KAAyB;QAClC,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,KAAK,SAAS,EAAE;YACxC,MAAM,IAAI,iCAAqB,CAC7B,qBAAqB,IAAI,CAAC,EAAE,eAAe,IAAI,CAAC,eAAe,gBAAgB,CAChF,CAAC;SACH;QACD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAvCD,0CAuCC;AAED,SAAgB,0BAA0B,CAAC,OAA2B;IACpE,IAAI,OAAO,KAAK,SAAS,EAAE;QACzB,OAAO,EAAE,CAAC;KACX;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE;QACpC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC;QACxB,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAyB,CAAC,CAAC;AAChC,CAAC;AARD,gEAQC","sourcesContent":["import { BuildStepContext } from './BuildStepContext.js';\nimport { BuildStepRuntimeError } from './errors.js';\n\nexport type BuildStepOutputById = Record<string, BuildStepOutput>;\nexport type BuildStepOutputProvider = (\n  ctx: BuildStepContext,\n  stepDisplayName: string\n) => BuildStepOutput;\n\ninterface BuildStepOutputProviderParams {\n  id: string;\n  required?: boolean;\n}\n\ninterface BuildStepOutputParams extends BuildStepOutputProviderParams {\n  stepDisplayName: string;\n}\n\nexport class BuildStepOutput {\n  public readonly id: string;\n  public readonly stepDisplayName: string;\n  public readonly required: boolean;\n\n  private _value?: string;\n\n  public static createProvider(params: BuildStepOutputProviderParams): BuildStepOutputProvider {\n    return (ctx, stepDisplayName) => new BuildStepOutput(ctx, { ...params, stepDisplayName });\n  }\n\n  constructor(\n    // @ts-expect-error ctx is not used in this class but let's keep it here for consistency\n    private readonly ctx: BuildStepContext,\n    { id, stepDisplayName, required = true }: BuildStepOutputParams\n  ) {\n    this.id = id;\n    this.stepDisplayName = stepDisplayName;\n    this.required = required;\n  }\n\n  public get value(): string | undefined {\n    if (this.required && this._value === undefined) {\n      throw new BuildStepRuntimeError(\n        `Output parameter \"${this.id}\" for step \"${this.stepDisplayName}\" is required but it was not set.`\n      );\n    }\n    return this._value;\n  }\n\n  public set(value: string | undefined): BuildStepOutput {\n    if (this.required && value === undefined) {\n      throw new BuildStepRuntimeError(\n        `Output parameter \"${this.id}\" for step \"${this.stepDisplayName}\" is required.`\n      );\n    }\n    this._value = value;\n    return this;\n  }\n}\n\nexport function makeBuildStepOutputByIdMap(outputs?: BuildStepOutput[]): BuildStepOutputById {\n  if (outputs === undefined) {\n    return {};\n  }\n  return outputs.reduce((acc, output) => {\n    acc[output.id] = output;\n    return acc;\n  }, {} as BuildStepOutputById);\n}\n"]}