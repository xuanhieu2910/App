import os from 'os';
import path from 'path';
import { parseOutputPath } from './utils/template.js';
import { BuildStepRuntimeError } from './errors.js';
export class BuildStepContext {
    constructor(buildId, logger, skipCleanup, runtimePlatform, projectSourceDirectory, projectTargetDirectory, workingDirectory) {
        this.buildId = buildId;
        this.logger = logger;
        this.skipCleanup = skipCleanup;
        this.runtimePlatform = runtimePlatform;
        this.projectSourceDirectory = projectSourceDirectory;
        this.projectTargetDirectory = projectTargetDirectory;
        this.stepById = {};
        this.stepsInternalBuildDirectory = path.join(os.tmpdir(), 'eas-build', buildId);
        this.workingDirectory =
            workingDirectory !== null && workingDirectory !== void 0 ? workingDirectory : path.join(this.stepsInternalBuildDirectory, 'project');
    }
    registerStep(step) {
        this.stepById[step.id] = step;
    }
    getStepOutputValue(path) {
        const { stepId, outputId } = parseOutputPath(path);
        if (!(stepId in this.stepById)) {
            throw new BuildStepRuntimeError(`Step "${stepId}" does not exist.`);
        }
        return this.stepById[stepId].getOutputValueByName(outputId);
    }
    child({ logger, workingDirectory, } = {}) {
        return new BuildStepContext(this.buildId, logger !== null && logger !== void 0 ? logger : this.logger, this.skipCleanup, this.runtimePlatform, this.projectSourceDirectory, this.projectTargetDirectory, workingDirectory !== null && workingDirectory !== void 0 ? workingDirectory : this.workingDirectory);
    }
}
//# sourceMappingURL=BuildStepContext.js.map