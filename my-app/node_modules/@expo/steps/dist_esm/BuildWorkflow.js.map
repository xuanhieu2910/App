{"version":3,"file":"BuildWorkflow.js","sourceRoot":"","sources":["../src/BuildWorkflow.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,aAAa;IAIxB;IACE,wFAAwF;IACvE,GAAqB,EACtC,EAAE,UAAU,EAAE,cAAc,EAAkE;QAD7E,QAAG,GAAH,GAAG,CAAkB;QAGtC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;IAEM,KAAK,CAAC,YAAY,CAAC,MAAoB,OAAO,CAAC,GAAG;QACvD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;YAClC,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;SAC9B;IACH,CAAC;CACF","sourcesContent":["import { BuildFunctionById } from './BuildFunction.js';\nimport { BuildStep } from './BuildStep.js';\nimport { BuildStepContext } from './BuildStepContext.js';\nimport { BuildStepEnv } from './BuildStepEnv.js';\n\nexport class BuildWorkflow {\n  public readonly buildSteps: BuildStep[];\n  public readonly buildFunctions: BuildFunctionById;\n\n  constructor(\n    // @ts-expect-error ctx is not used in this class but let's keep it here for consistency\n    private readonly ctx: BuildStepContext,\n    { buildSteps, buildFunctions }: { buildSteps: BuildStep[]; buildFunctions: BuildFunctionById }\n  ) {\n    this.buildSteps = buildSteps;\n    this.buildFunctions = buildFunctions;\n  }\n\n  public async executeAsync(env: BuildStepEnv = process.env): Promise<void> {\n    for (const step of this.buildSteps) {\n      await step.executeAsync(env);\n    }\n  }\n}\n"]}