{"version":3,"file":"BuildWorkflowValidator.js","sourceRoot":"","sources":["../src/BuildWorkflowValidator.ts"],"names":[],"mappings":"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","sourcesContent":["import { BuildStep } from './BuildStep.js';\nimport { BuildWorkflow } from './BuildWorkflow.js';\nimport { BuildConfigError, BuildWorkflowError } from './errors.js';\nimport { duplicates } from './utils/expodash/duplicates.js';\nimport { nullthrows } from './utils/nullthrows.js';\nimport { findOutputPaths } from './utils/template.js';\n\nexport class BuildWorkflowValidator {\n  constructor(private readonly workflow: BuildWorkflow) {}\n\n  public validate(): void {\n    const errors: BuildConfigError[] = [];\n    errors.push(...this.validateUniqueStepIds());\n    errors.push(...this.validateInputs());\n    errors.push(...this.validateAllowedPlatforms());\n    if (errors.length !== 0) {\n      throw new BuildWorkflowError('Build workflow is invalid.', errors);\n    }\n  }\n\n  private validateUniqueStepIds(): BuildConfigError[] {\n    const stepIds = this.workflow.buildSteps.map(({ id }) => id);\n    const duplicatedStepIds = duplicates(stepIds);\n    if (duplicatedStepIds.length === 0) {\n      return [];\n    } else {\n      const error = new BuildConfigError(\n        `Duplicated step IDs: ${duplicatedStepIds.map((i) => `\"${i}\"`).join(', ')}`\n      );\n      return [error];\n    }\n  }\n\n  private validateInputs(): BuildConfigError[] {\n    const errors: BuildConfigError[] = [];\n\n    const allStepIds = new Set(this.workflow.buildSteps.map((s) => s.id));\n    const visitedStepByStepId: Record<string, BuildStep> = {};\n    for (const currentStep of this.workflow.buildSteps) {\n      for (const currentStepInput of currentStep.inputs ?? []) {\n        if (currentStepInput.required && currentStepInput.rawValue === undefined) {\n          const error = new BuildConfigError(\n            `Input parameter \"${currentStepInput.id}\" for step \"${currentStep.displayName}\" is required but it was not set.`\n          );\n          errors.push(error);\n        }\n\n        if (\n          currentStepInput.rawValue !== undefined &&\n          typeof currentStepInput.rawValue !== currentStepInput.allowedValueTypeName\n        ) {\n          const error = new BuildConfigError(\n            `Input parameter \"${currentStepInput.id}\" for step \"${currentStep.displayName}\" is set to \"${currentStepInput.rawValue}\" which is not of type \"${currentStepInput.allowedValueTypeName}\".`\n          );\n          errors.push(error);\n        }\n\n        if (currentStepInput.defaultValue === undefined) {\n          continue;\n        }\n        if (!currentStepInput.isValueOneOfAllowedValues()) {\n          const error = new BuildConfigError(\n            `Input parameter \"${currentStepInput.id}\" for step \"${\n              currentStep.displayName\n            }\" is set to \"${\n              currentStepInput.value\n            }\" which is not one of the allowed values: ${nullthrows(currentStepInput.allowedValues)\n              .map((i) => `\"${i}\"`)\n              .join(', ')}.`\n          );\n          errors.push(error);\n        }\n        const paths =\n          typeof currentStepInput.defaultValue === 'string'\n            ? findOutputPaths(currentStepInput.defaultValue)\n            : [];\n        for (const { stepId: referencedStepId, outputId: referencedStepOutputId } of paths) {\n          if (!(referencedStepId in visitedStepByStepId)) {\n            if (allStepIds.has(referencedStepId)) {\n              const error = new BuildConfigError(\n                `Input parameter \"${currentStepInput.id}\" for step \"${currentStep.displayName}\" uses an expression that references an output parameter from the future step \"${referencedStepId}\".`\n              );\n              errors.push(error);\n            } else {\n              const error = new BuildConfigError(\n                `Input parameter \"${currentStepInput.id}\" for step \"${currentStep.displayName}\" uses an expression that references an output parameter from a non-existent step \"${referencedStepId}\".`\n              );\n              errors.push(error);\n            }\n          } else {\n            if (!visitedStepByStepId[referencedStepId].hasOutputParameter(referencedStepOutputId)) {\n              const error = new BuildConfigError(\n                `Input parameter \"${currentStepInput.id}\" for step \"${currentStep.displayName}\" uses an expression that references an undefined output parameter \"${referencedStepOutputId}\" from step \"${referencedStepId}\".`\n              );\n              errors.push(error);\n            }\n          }\n        }\n      }\n      visitedStepByStepId[currentStep.id] = currentStep;\n    }\n\n    return errors;\n  }\n\n  private validateAllowedPlatforms(): BuildConfigError[] {\n    const errors: BuildConfigError[] = [];\n    for (const step of this.workflow.buildSteps) {\n      if (!step.canBeRunOnRuntimePlatform()) {\n        const error = new BuildConfigError(\n          `Step \"${step.displayName}\" is not allowed on platform \"${\n            step.ctx.runtimePlatform\n          }\". Allowed platforms for this step are: ${nullthrows(\n            step.supportedRuntimePlatforms,\n            `step.supportedRuntimePlatforms can't be falsy if canBeRunOnRuntimePlatform() is false`\n          )\n            .map((p) => `\"${p}\"`)\n            .join(', ')}.`\n        );\n        errors.push(error);\n      }\n    }\n    return errors;\n  }\n}\n"]}