{"version":3,"file":"BuildStepContext.js","sourceRoot":"","sources":["../src/BuildStepContext.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAKxB,OAAO,EAAE,eAAe,EAAE,MAAM,qBAAqB,CAAC;AACtD,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAGpD,MAAM,OAAO,gBAAgB;IAM3B,YACkB,OAAe,EACf,MAAc,EACd,WAAoB,EACpB,eAAqC,EACrC,sBAA8B,EAC9B,sBAA8B,EAC9C,gBAAyB;QANT,YAAO,GAAP,OAAO,CAAQ;QACf,WAAM,GAAN,MAAM,CAAQ;QACd,gBAAW,GAAX,WAAW,CAAS;QACpB,oBAAe,GAAf,eAAe,CAAsB;QACrC,2BAAsB,GAAtB,sBAAsB,CAAQ;QAC9B,2BAAsB,GAAtB,sBAAsB,CAAQ;QARxC,aAAQ,GAA8B,EAAE,CAAC;QAW/C,IAAI,CAAC,2BAA2B,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QAChF,IAAI,CAAC,gBAAgB;YACnB,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,SAAS,CAAC,CAAC;IAC/E,CAAC;IAEM,YAAY,CAAC,IAAe;QACjC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;IAChC,CAAC;IAEM,kBAAkB,CAAC,IAAY;QACpC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,EAAE;YAC9B,MAAM,IAAI,qBAAqB,CAAC,SAAS,MAAM,mBAAmB,CAAC,CAAC;SACrE;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAC9D,CAAC;IAEM,KAAK,CAAC,EACX,MAAM,EACN,gBAAgB,MAId,EAAE;QACJ,OAAO,IAAI,gBAAgB,CACzB,IAAI,CAAC,OAAO,EACZ,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,IAAI,CAAC,MAAM,EACrB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,sBAAsB,EAC3B,gBAAgB,aAAhB,gBAAgB,cAAhB,gBAAgB,GAAI,IAAI,CAAC,gBAAgB,CAC1C,CAAC;IACJ,CAAC;CACF","sourcesContent":["import os from 'os';\nimport path from 'path';\n\nimport { bunyan } from '@expo/logger';\n\nimport { BuildStep } from './BuildStep.js';\nimport { parseOutputPath } from './utils/template.js';\nimport { BuildStepRuntimeError } from './errors.js';\nimport { BuildRuntimePlatform } from './BuildRuntimePlatform.js';\n\nexport class BuildStepContext {\n  public readonly stepsInternalBuildDirectory: string;\n  public readonly workingDirectory: string;\n\n  private stepById: Record<string, BuildStep> = {};\n\n  constructor(\n    public readonly buildId: string,\n    public readonly logger: bunyan,\n    public readonly skipCleanup: boolean,\n    public readonly runtimePlatform: BuildRuntimePlatform,\n    public readonly projectSourceDirectory: string,\n    public readonly projectTargetDirectory: string,\n    workingDirectory?: string\n  ) {\n    this.stepsInternalBuildDirectory = path.join(os.tmpdir(), 'eas-build', buildId);\n    this.workingDirectory =\n      workingDirectory ?? path.join(this.stepsInternalBuildDirectory, 'project');\n  }\n\n  public registerStep(step: BuildStep): void {\n    this.stepById[step.id] = step;\n  }\n\n  public getStepOutputValue(path: string): string | undefined {\n    const { stepId, outputId } = parseOutputPath(path);\n    if (!(stepId in this.stepById)) {\n      throw new BuildStepRuntimeError(`Step \"${stepId}\" does not exist.`);\n    }\n    return this.stepById[stepId].getOutputValueByName(outputId);\n  }\n\n  public child({\n    logger,\n    workingDirectory,\n  }: {\n    logger?: bunyan;\n    workingDirectory?: string;\n  } = {}): BuildStepContext {\n    return new BuildStepContext(\n      this.buildId,\n      logger ?? this.logger,\n      this.skipCleanup,\n      this.runtimePlatform,\n      this.projectSourceDirectory,\n      this.projectTargetDirectory,\n      workingDirectory ?? this.workingDirectory\n    );\n  }\n}\n"]}