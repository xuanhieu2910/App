import { BuildStepContext } from './BuildStepContext.js';
import { BuildStepInput, BuildStepInputById } from './BuildStepInput.js';
import { BuildStepOutput, BuildStepOutputById } from './BuildStepOutput.js';
import { BuildStepEnv } from './BuildStepEnv.js';
import { BuildRuntimePlatform } from './BuildRuntimePlatform.js';
export declare enum BuildStepStatus {
    NEW = "new",
    IN_PROGRESS = "in-progress",
    CANCELED = "canceled",
    FAIL = "fail",
    WARNING = "warning",
    SUCCESS = "success"
}
export declare enum BuildStepLogMarker {
    START_STEP = "start-step",
    END_STEP = "end-step"
}
export type BuildStepFunction = (ctx: BuildStepContext, { inputs, outputs, env, }: {
    inputs: BuildStepInputById;
    outputs: BuildStepOutputById;
    env: BuildStepEnv;
}) => unknown;
export declare class BuildStep {
    readonly id: string;
    readonly name?: string;
    readonly displayName: string;
    readonly supportedRuntimePlatforms?: BuildRuntimePlatform[];
    readonly inputs?: BuildStepInput[];
    readonly outputs?: BuildStepOutput[];
    readonly command?: string;
    readonly fn?: BuildStepFunction;
    readonly shell: string;
    readonly ctx: BuildStepContext;
    status: BuildStepStatus;
    private readonly internalId;
    private readonly inputById;
    private readonly outputById;
    private executed;
    static getNewId(userDefinedId?: string): string;
    static getDisplayName({ id, name, command, }: {
        id: string;
        name?: string;
        command?: string;
    }): string;
    constructor(ctx: BuildStepContext, { id, name, displayName, inputs, outputs, command, fn, workingDirectory: maybeWorkingDirectory, shell, supportedRuntimePlatforms: maybeSupportedRuntimePlatforms, }: {
        id: string;
        name?: string;
        displayName: string;
        inputs?: BuildStepInput[];
        outputs?: BuildStepOutput[];
        command?: string;
        fn?: BuildStepFunction;
        workingDirectory?: string;
        shell?: string;
        supportedRuntimePlatforms?: BuildRuntimePlatform[];
    });
    executeAsync(env?: BuildStepEnv): Promise<void>;
    hasOutputParameter(name: string): boolean;
    getOutputValueByName(name: string): string | undefined;
    canBeRunOnRuntimePlatform(): boolean;
    private executeCommandAsync;
    private exectuteFnAsync;
    private interpolateInputsInCommand;
    private collectAndValidateOutputsAsync;
    private getScriptEnv;
}
