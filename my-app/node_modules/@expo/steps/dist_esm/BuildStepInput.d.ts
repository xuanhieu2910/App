import { BuildStepContext } from './BuildStepContext.js';
export declare enum BuildStepInputValueTypeName {
    STRING = "string",
    BOOLEAN = "boolean",
    NUMBER = "number"
}
export type BuildStepInputValueType = string | boolean | number;
export type BuildStepInputById = Record<string, BuildStepInput>;
export type BuildStepInputProvider = (ctx: BuildStepContext, stepId: string) => BuildStepInput;
interface BuildStepInputProviderParams {
    id: string;
    allowedValues?: BuildStepInputValueType[];
    defaultValue?: BuildStepInputValueType;
    required?: boolean;
    allowedValueTypeName?: BuildStepInputValueTypeName;
}
interface BuildStepInputParams extends BuildStepInputProviderParams {
    stepDisplayName: string;
}
export declare class BuildStepInput {
    private readonly ctx;
    readonly id: string;
    readonly stepDisplayName: string;
    readonly defaultValue?: BuildStepInputValueType;
    readonly allowedValues?: BuildStepInputValueType[];
    readonly allowedValueTypeName: BuildStepInputValueTypeName;
    readonly required: boolean;
    private _value?;
    static createProvider(params: BuildStepInputProviderParams): BuildStepInputProvider;
    constructor(ctx: BuildStepContext, { id, stepDisplayName, allowedValues, defaultValue, required, allowedValueTypeName, }: BuildStepInputParams);
    get value(): BuildStepInputValueType | undefined;
    get rawValue(): BuildStepInputValueType | undefined;
    set(value: BuildStepInputValueType | undefined): BuildStepInput;
    isValueOneOfAllowedValues(): boolean;
}
export declare function makeBuildStepInputByIdMap(inputs?: BuildStepInput[]): BuildStepInputById;
export {};
