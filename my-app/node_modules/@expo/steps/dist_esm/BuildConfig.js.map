{"version":3,"file":"BuildConfig.js","sourceRoot":"","sources":["../src/BuildConfig.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport Joi from 'joi';\nimport YAML from 'yaml';\n\nimport { BuildConfigError, BuildWorkflowError } from './errors.js';\nimport { BuildRuntimePlatform } from './BuildRuntimePlatform.js';\nimport { BuildFunction } from './BuildFunction.js';\nimport { BuildStepInputValueType, BuildStepInputValueTypeName } from './BuildStepInput.js';\n\nexport type BuildFunctions = Record<string, BuildFunctionConfig>;\n\ninterface BuildFunctionsConfigFile {\n  configFilesToImport?: string[];\n  functions?: BuildFunctions;\n}\n\nexport interface BuildConfig extends BuildFunctionsConfigFile {\n  build: {\n    name?: string;\n    steps: BuildStepConfig[];\n  };\n}\n\nexport type BuildStepConfig =\n  | BuildStepCommandRun\n  | BuildStepBareCommandRun\n  | BuildStepFunctionCall\n  | BuildStepBareFunctionCall;\n\nexport type BuildStepCommandRun = {\n  run: BuildFunctionCallConfig & {\n    outputs?: BuildStepOutputs;\n    command: string;\n  };\n};\nexport type BuildStepBareCommandRun = { run: string };\nexport type BuildStepFunctionCall = {\n  [functionId: string]: BuildFunctionCallConfig;\n};\nexport type BuildStepBareFunctionCall = string;\n\nexport type BuildFunctionCallConfig = {\n  id?: string;\n  inputs?: BuildStepInputs;\n  name?: string;\n  workingDirectory?: string;\n  shell?: string;\n};\n\nexport type BuildStepInputs = Record<string, BuildStepInputValueType>;\nexport type BuildStepOutputs = (\n  | string\n  | {\n      name: string;\n      required?: boolean;\n    }\n)[];\n\nexport interface BuildFunctionConfig {\n  inputs?: BuildFunctionInputs;\n  outputs?: BuildFunctionOutputs;\n  name?: string;\n  supportedRuntimePlatforms?: BuildRuntimePlatform[];\n  shell?: string;\n  command: string;\n}\n\nexport type BuildFunctionInputs = (\n  | string\n  | {\n      name: string;\n      defaultValue?: BuildStepInputValueType;\n      allowedValues?: BuildStepInputValueType[];\n      required?: boolean;\n      allowedValueType: BuildStepInputValueTypeName;\n    }\n)[];\nexport type BuildFunctionOutputs = BuildStepOutputs;\n\nconst BuildFunctionInputsSchema = Joi.array().items(\n  Joi.alternatives().conditional(Joi.ref('.'), {\n    is: Joi.string(),\n    then: Joi.string().required(),\n    otherwise: Joi.object({\n      name: Joi.string().required(),\n      defaultValue: Joi.when('allowedValues', {\n        is: Joi.exist(),\n        then: Joi.valid(Joi.in('allowedValues')).messages({\n          'any.only': '{{#label}} must be one of allowed values',\n        }),\n      })\n        .when('allowedValueType', {\n          is: BuildStepInputValueTypeName.STRING,\n          then: Joi.string(),\n        })\n        .when('allowedValueType', {\n          is: BuildStepInputValueTypeName.BOOLEAN,\n          then: Joi.boolean(),\n        })\n        .when('allowedValueType', {\n          is: BuildStepInputValueTypeName.NUMBER,\n          then: Joi.number(),\n        }),\n      allowedValues: Joi.when('allowedValueType', {\n        is: BuildStepInputValueTypeName.STRING,\n        then: Joi.array().items(Joi.string()),\n      })\n        .when('allowedValueType', {\n          is: BuildStepInputValueTypeName.BOOLEAN,\n          then: Joi.array().items(Joi.boolean()),\n        })\n        .when('allowedValueType', {\n          is: BuildStepInputValueTypeName.NUMBER,\n          then: Joi.array().items(Joi.number()),\n        }),\n      allowedValueType: Joi.string()\n        .valid(...Object.values(BuildStepInputValueTypeName))\n        .default(BuildStepInputValueTypeName.STRING),\n      required: Joi.boolean(),\n    })\n      .rename('allowed_values', 'allowedValues')\n      .rename('default_value', 'defaultValue')\n      .rename('type', 'allowedValueType')\n      .required(),\n  })\n);\n\nconst BuildStepOutputsSchema = Joi.array().items(\n  Joi.alternatives().try(\n    Joi.string().required(),\n    Joi.object({\n      name: Joi.string().required(),\n      required: Joi.boolean(),\n    }).required()\n  )\n);\n\nconst BuildFunctionCallSchema = Joi.object({\n  id: Joi.string(),\n  inputs: Joi.object().pattern(\n    Joi.string(),\n    Joi.alternatives().try(Joi.string(), Joi.boolean(), Joi.number())\n  ),\n  name: Joi.string(),\n  workingDirectory: Joi.string(),\n  shell: Joi.string(),\n}).rename('working_directory', 'workingDirectory');\n\nconst BuildStepConfigSchema = Joi.any<BuildStepConfig>()\n  .when(\n    Joi.object().pattern(\n      Joi.string().disallow('run').required(),\n      Joi.object().unknown().required()\n    ),\n    {\n      then: Joi.object().pattern(\n        Joi.string().disallow('run').min(1).required(),\n        BuildFunctionCallSchema.required(),\n        { matches: Joi.array().length(1) }\n      ),\n    }\n  )\n  .when(Joi.object({ run: Joi.object().unknown().required() }), {\n    then: Joi.object({\n      run: BuildFunctionCallSchema.keys({\n        outputs: BuildStepOutputsSchema,\n        command: Joi.string().required(),\n      }),\n    }),\n  })\n  .when(Joi.object({ run: Joi.string().required() }), {\n    then: Joi.object({\n      run: Joi.string().min(1).required(),\n    }),\n  })\n  .when(Joi.string(), {\n    then: Joi.string().min(1),\n  });\n\nconst BuildFunctionConfigSchema = Joi.object({\n  name: Joi.string(),\n  supportedRuntimePlatforms: Joi.array().items(...Object.values(BuildRuntimePlatform)),\n  inputs: BuildFunctionInputsSchema,\n  outputs: BuildStepOutputsSchema,\n  command: Joi.string().required(),\n  shell: Joi.string(),\n}).rename('supported_platforms', 'supportedRuntimePlatforms');\n\nexport const BuildFunctionsConfigFileSchema = Joi.object<BuildFunctionsConfigFile>({\n  configFilesToImport: Joi.array().items(Joi.string().pattern(/\\.y(a)?ml$/)),\n  functions: Joi.object().pattern(\n    Joi.string()\n      .pattern(/^[\\w-]+$/, 'function names')\n      .min(1)\n      .required()\n      .disallow('run'),\n    BuildFunctionConfigSchema.required()\n  ),\n})\n  .rename('import', 'configFilesToImport')\n  .required();\n\nexport const BuildConfigSchema = BuildFunctionsConfigFileSchema.append<BuildConfig>({\n  build: Joi.object({\n    name: Joi.string(),\n    steps: Joi.array().items(BuildStepConfigSchema.required()).required(),\n  }).required(),\n}).required();\n\ninterface BuildConfigValidationParams {\n  externalFunctionIds?: string[];\n  skipNamespacedFunctionsCheck?: boolean;\n}\n\nexport async function readAndValidateBuildConfigAsync(\n  configPath: string,\n  params: BuildConfigValidationParams = {}\n): Promise<BuildConfig> {\n  const rawConfig = await readRawBuildConfigAsync(configPath);\n\n  const config = validateConfig(BuildConfigSchema, rawConfig);\n  const importedFunctions = await importFunctionsAsync(configPath, config.configFilesToImport);\n  mergeConfigWithImportedFunctions(config, importedFunctions);\n  validateAllFunctionsExist(config, params);\n  return config;\n}\n\nasync function importFunctionsAsync(\n  baseConfigPath: string,\n  configPathsToImport?: string[]\n): Promise<BuildFunctions> {\n  if (!configPathsToImport) {\n    return {};\n  }\n\n  const baseConfigDir = path.dirname(baseConfigPath);\n\n  const errors: BuildConfigError[] = [];\n  const importedFunctions: BuildFunctions = {};\n  // this is a set of visited files identified by ABSOLUTE paths\n  const visitedFiles = new Set<string>([baseConfigPath]);\n  const configFilesToVisit = (configPathsToImport ?? []).map((childConfigRelativePath) =>\n    path.resolve(baseConfigDir, childConfigRelativePath)\n  );\n  while (configFilesToVisit.length > 0) {\n    const childConfigPath = configFilesToVisit.shift();\n    assert(childConfigPath, 'Guaranteed by loop condition');\n    if (visitedFiles.has(childConfigPath)) {\n      continue;\n    }\n    visitedFiles.add(childConfigPath);\n    try {\n      const childConfig = await readAndValidateBuildFunctionsConfigFileAsync(childConfigPath);\n      for (const functionName in childConfig.functions) {\n        if (!(functionName in importedFunctions)) {\n          importedFunctions[functionName] = childConfig.functions[functionName];\n        }\n      }\n      if (childConfig.configFilesToImport) {\n        const childDir = path.dirname(childConfigPath);\n        configFilesToVisit.push(\n          ...childConfig.configFilesToImport.map((relativePath) =>\n            path.resolve(childDir, relativePath)\n          )\n        );\n      }\n    } catch (err) {\n      if (err instanceof BuildConfigError) {\n        errors.push(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n  if (errors.length > 0) {\n    throw new BuildWorkflowError(`Detected build config errors in imported files.`, errors);\n  }\n  return importedFunctions;\n}\n\nexport async function readAndValidateBuildFunctionsConfigFileAsync(\n  configPath: string\n): Promise<BuildFunctionsConfigFile> {\n  const rawConfig = await readRawBuildConfigAsync(configPath);\n  return validateConfig(BuildFunctionsConfigFileSchema, rawConfig);\n}\n\nexport async function readRawBuildConfigAsync(configPath: string): Promise<any> {\n  const contents = await fs.readFile(configPath, 'utf-8');\n  return YAML.parse(contents);\n}\n\nexport function validateConfig<T>(\n  schema: Joi.ObjectSchema<T>,\n  config: object,\n  configFilePath?: string\n): T {\n  const { error, value } = schema.validate(config, {\n    allowUnknown: false,\n    abortEarly: false,\n  });\n  if (error) {\n    const errorMessage = error.details.map(({ message }) => message).join(', ');\n    throw new BuildConfigError(errorMessage, {\n      cause: error,\n      ...(configFilePath && { metadata: { configFilePath } }),\n    });\n  }\n  return value;\n}\n\nexport function mergeConfigWithImportedFunctions(\n  config: BuildConfig,\n  importedFunctions: BuildFunctions\n): void {\n  if (Object.keys(importedFunctions).length === 0) {\n    return;\n  }\n  config.functions = config.functions ?? {};\n  for (const functionName in importedFunctions) {\n    if (!(functionName in config.functions)) {\n      config.functions[functionName] = importedFunctions[functionName];\n    }\n  }\n}\n\nexport function isBuildStepCommandRun(step: BuildStepConfig): step is BuildStepCommandRun {\n  return typeof step === 'object' && typeof step.run === 'object';\n}\n\nexport function isBuildStepBareCommandRun(step: BuildStepConfig): step is BuildStepBareCommandRun {\n  return typeof step === 'object' && typeof step.run === 'string';\n}\n\nexport function isBuildStepFunctionCall(step: BuildStepConfig): step is BuildStepFunctionCall {\n  return typeof step === 'object' && !('run' in step);\n}\n\nexport function isBuildStepBareFunctionCall(\n  step: BuildStepConfig\n): step is BuildStepBareFunctionCall {\n  return typeof step === 'string';\n}\n\nexport function validateAllFunctionsExist(\n  config: BuildConfig,\n  { externalFunctionIds = [], skipNamespacedFunctionsCheck }: BuildConfigValidationParams\n): void {\n  const calledFunctionsSet = new Set<string>();\n  for (const step of config.build.steps) {\n    if (typeof step === 'string') {\n      calledFunctionsSet.add(step);\n    } else if (!('run' in step)) {\n      const keys = Object.keys(step);\n      assert(\n        keys.length === 1,\n        'There must be at most one function call in the step (enforced by joi).'\n      );\n      calledFunctionsSet.add(keys[0]);\n    }\n  }\n  const calledFunctions = Array.from(calledFunctionsSet);\n  const externalFunctionIdsSet = new Set(externalFunctionIds);\n  const nonExistentFunctions = calledFunctions.filter((calledFunction) => {\n    if (BuildFunction.isFulldIdNamespaced(calledFunction) && skipNamespacedFunctionsCheck) {\n      return false;\n    }\n    return (\n      !(calledFunction in (config.functions ?? {})) && !externalFunctionIdsSet.has(calledFunction)\n    );\n  });\n  if (nonExistentFunctions.length > 0) {\n    throw new BuildConfigError(\n      `Calling non-existent functions: ${nonExistentFunctions.map((f) => `\"${f}\"`).join(', ')}.`\n    );\n  }\n}\n"]}