import { BuildRuntimePlatform } from './BuildRuntimePlatform.js';
import { BuildStep, BuildStepFunction } from './BuildStep.js';
import { BuildStepContext } from './BuildStepContext.js';
import { BuildStepInputProvider, BuildStepInputValueType } from './BuildStepInput.js';
import { BuildStepOutputProvider } from './BuildStepOutput.js';
export type BuildFunctionById = Record<string, BuildFunction>;
export type BuildFunctionCallInputs = Record<string, BuildStepInputValueType>;
export declare class BuildFunction {
    readonly namespace?: string;
    readonly id: string;
    readonly name?: string;
    readonly supportedRuntimePlatforms?: BuildRuntimePlatform[];
    readonly inputProviders?: BuildStepInputProvider[];
    readonly outputProviders?: BuildStepOutputProvider[];
    readonly command?: string;
    readonly fn?: BuildStepFunction;
    readonly shell?: string;
    static isFulldIdNamespaced(fullId: string): boolean;
    constructor({ namespace, id, name, supportedRuntimePlatforms, inputProviders, outputProviders, command, fn, shell, }: {
        namespace?: string;
        id: string;
        name?: string;
        supportedRuntimePlatforms?: BuildRuntimePlatform[];
        inputProviders?: BuildStepInputProvider[];
        outputProviders?: BuildStepOutputProvider[];
        command?: string;
        fn?: BuildStepFunction;
        shell?: string;
    });
    getFullId(): string;
    createBuildStepFromFunctionCall(ctx: BuildStepContext, { id, name, callInputs, workingDirectory, shell, }?: {
        id?: string;
        name?: string;
        callInputs?: BuildFunctionCallInputs;
        workingDirectory?: string;
        shell?: string;
    }): BuildStep;
}
