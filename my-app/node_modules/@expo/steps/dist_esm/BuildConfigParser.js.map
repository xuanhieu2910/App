{"version":3,"file":"BuildConfigParser.js","sourceRoot":"","sources":["../src/BuildConfigParser.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport {\n  BuildConfig,\n  BuildFunctionConfig,\n  BuildFunctionInputs,\n  BuildFunctionOutputs,\n  BuildStepBareCommandRun,\n  BuildStepBareFunctionCall,\n  BuildStepCommandRun,\n  BuildStepConfig,\n  BuildStepFunctionCall,\n  BuildStepInputs,\n  BuildStepOutputs,\n  isBuildStepBareCommandRun,\n  isBuildStepBareFunctionCall,\n  isBuildStepCommandRun,\n  readAndValidateBuildConfigAsync,\n} from './BuildConfig.js';\nimport { BuildFunction, BuildFunctionById } from './BuildFunction.js';\nimport { BuildStep } from './BuildStep.js';\nimport { BuildStepContext } from './BuildStepContext.js';\nimport {\n  BuildStepInput,\n  BuildStepInputProvider,\n  BuildStepInputValueTypeName,\n} from './BuildStepInput.js';\nimport { BuildStepOutput, BuildStepOutputProvider } from './BuildStepOutput.js';\nimport { BuildWorkflow } from './BuildWorkflow.js';\nimport { BuildWorkflowValidator } from './BuildWorkflowValidator.js';\nimport { BuildStepRuntimeError } from './errors.js';\nimport { duplicates } from './utils/expodash/duplicates.js';\nimport { uniq } from './utils/expodash/uniq.js';\n\nexport class BuildConfigParser {\n  private readonly configPath: string;\n  private readonly externalFunctions?: BuildFunction[];\n\n  constructor(\n    private readonly ctx: BuildStepContext,\n    { configPath, externalFunctions }: { configPath: string; externalFunctions?: BuildFunction[] }\n  ) {\n    this.validateExternalFunctions(externalFunctions);\n\n    this.configPath = configPath;\n    this.externalFunctions = externalFunctions;\n  }\n\n  public async parseAsync(): Promise<BuildWorkflow> {\n    const config = await readAndValidateBuildConfigAsync(this.configPath, {\n      externalFunctionIds: this.getExternalFunctionFullIds(),\n    });\n    const configBuildFunctions = this.createBuildFunctionsFromConfig(config.functions);\n    const buildFunctions = this.mergeBuildFunctionsWithExternal(\n      configBuildFunctions,\n      this.externalFunctions\n    );\n    const buildSteps = config.build.steps.map((stepConfig) =>\n      this.createBuildStepFromConfig(stepConfig, buildFunctions)\n    );\n    const workflow = new BuildWorkflow(this.ctx, { buildSteps, buildFunctions });\n    new BuildWorkflowValidator(workflow).validate();\n    return workflow;\n  }\n\n  private createBuildStepFromConfig(\n    buildStepConfig: BuildStepConfig,\n    buildFunctions: BuildFunctionById\n  ): BuildStep {\n    if (isBuildStepCommandRun(buildStepConfig)) {\n      return this.createBuildStepFromBuildStepCommandRun(buildStepConfig);\n    } else if (isBuildStepBareCommandRun(buildStepConfig)) {\n      return this.createBuildStepFromBuildStepBareCommandRun(buildStepConfig);\n    } else if (isBuildStepBareFunctionCall(buildStepConfig)) {\n      return this.createBuildStepFromBuildStepBareFunctionCall(buildFunctions, buildStepConfig);\n    } else {\n      return this.createBuildStepFromBuildStepFunctionCall(buildFunctions, buildStepConfig);\n    }\n  }\n\n  private createBuildStepFromBuildStepCommandRun({ run }: BuildStepCommandRun): BuildStep {\n    const {\n      id: maybeId,\n      inputs: inputsConfig,\n      outputs: outputsConfig,\n      name,\n      workingDirectory,\n      shell,\n      command,\n    } = run;\n    const id = BuildStep.getNewId(maybeId);\n    const displayName = BuildStep.getDisplayName({ id, name, command });\n    const inputs =\n      inputsConfig && this.createBuildStepInputsFromDefinition(inputsConfig, displayName);\n    const outputs =\n      outputsConfig && this.createBuildStepOutputsFromDefinition(outputsConfig, displayName);\n    return new BuildStep(this.ctx, {\n      id,\n      inputs,\n      outputs,\n      name,\n      displayName,\n      workingDirectory,\n      shell,\n      command,\n    });\n  }\n\n  private createBuildStepFromBuildStepBareCommandRun({\n    run: command,\n  }: BuildStepBareCommandRun): BuildStep {\n    const id = BuildStep.getNewId();\n    const displayName = BuildStep.getDisplayName({ id, command });\n    return new BuildStep(this.ctx, {\n      id,\n      displayName,\n      command,\n    });\n  }\n\n  private createBuildStepFromBuildStepBareFunctionCall(\n    buildFunctions: BuildFunctionById,\n    functionId: BuildStepBareFunctionCall\n  ): BuildStep {\n    const buildFunction = buildFunctions[functionId];\n    return buildFunction.createBuildStepFromFunctionCall(this.ctx);\n  }\n\n  private createBuildStepFromBuildStepFunctionCall(\n    buildFunctions: BuildFunctionById,\n    buildStepFunctionCall: BuildStepFunctionCall\n  ): BuildStep {\n    const keys = Object.keys(buildStepFunctionCall);\n    assert(\n      keys.length === 1,\n      'There must be at most one function call in the step (enforced by joi).'\n    );\n    const functionId = keys[0];\n    const buildFunctionCallConfig = buildStepFunctionCall[functionId];\n    const buildFunction = buildFunctions[functionId];\n    return buildFunction.createBuildStepFromFunctionCall(this.ctx, {\n      id: buildFunctionCallConfig.id,\n      name: buildFunctionCallConfig.name,\n      callInputs: buildFunctionCallConfig.inputs,\n      workingDirectory: buildFunctionCallConfig.workingDirectory,\n      shell: buildFunctionCallConfig.shell,\n    });\n  }\n\n  private createBuildFunctionsFromConfig(\n    buildFunctionsConfig: BuildConfig['functions']\n  ): BuildFunctionById {\n    if (!buildFunctionsConfig) {\n      return {};\n    }\n    const result: BuildFunctionById = {};\n    for (const [functionId, buildFunctionConfig] of Object.entries(buildFunctionsConfig)) {\n      const buildFunction = this.createBuildFunctionFromConfig({\n        id: functionId,\n        ...buildFunctionConfig,\n      });\n      result[buildFunction.getFullId()] = buildFunction;\n    }\n    return result;\n  }\n\n  private createBuildFunctionFromConfig({\n    id,\n    name,\n    inputs: inputsConfig,\n    outputs: outputsConfig,\n    shell,\n    command,\n    supportedRuntimePlatforms,\n  }: BuildFunctionConfig & { id: string }): BuildFunction {\n    const inputProviders =\n      inputsConfig && this.createBuildStepInputProvidersFromBuildFunctionInputs(inputsConfig);\n    const outputProviders =\n      outputsConfig && this.createBuildStepOutputProvidersFromBuildFunctionOutputs(outputsConfig);\n    return new BuildFunction({\n      id,\n      name,\n      inputProviders,\n      outputProviders,\n      shell,\n      command,\n      supportedRuntimePlatforms,\n    });\n  }\n\n  private createBuildStepInputsFromDefinition(\n    buildStepInputs: BuildStepInputs,\n    stepDisplayName: string\n  ): BuildStepInput[] {\n    return Object.entries(buildStepInputs).map(\n      ([key, value]) =>\n        new BuildStepInput(this.ctx, {\n          id: key,\n          stepDisplayName,\n          defaultValue: value,\n          required: true,\n          allowedValueTypeName: typeof value as BuildStepInputValueTypeName,\n        })\n    );\n  }\n\n  private createBuildStepInputProvidersFromBuildFunctionInputs(\n    buildFunctionInputs: BuildFunctionInputs\n  ): BuildStepInputProvider[] {\n    return buildFunctionInputs.map((entry) => {\n      return typeof entry === 'string'\n        ? BuildStepInput.createProvider({ id: entry })\n        : BuildStepInput.createProvider({\n            id: entry.name,\n            required: entry.required ?? true,\n            defaultValue: entry.defaultValue,\n            allowedValues: entry.allowedValues,\n            allowedValueTypeName: entry.allowedValueType,\n          });\n    });\n  }\n\n  private createBuildStepOutputsFromDefinition(\n    buildStepOutputs: BuildStepOutputs,\n    stepDisplayName: string\n  ): BuildStepOutput[] {\n    return buildStepOutputs.map((entry) =>\n      typeof entry === 'string'\n        ? new BuildStepOutput(this.ctx, { id: entry, stepDisplayName, required: true })\n        : new BuildStepOutput(this.ctx, {\n            id: entry.name,\n            stepDisplayName,\n            required: entry.required ?? true,\n          })\n    );\n  }\n\n  private createBuildStepOutputProvidersFromBuildFunctionOutputs(\n    buildFunctionOutputs: BuildFunctionOutputs\n  ): BuildStepOutputProvider[] {\n    return buildFunctionOutputs.map((entry) =>\n      typeof entry === 'string'\n        ? BuildStepOutput.createProvider({ id: entry, required: true })\n        : BuildStepOutput.createProvider({ id: entry.name, required: entry.required ?? true })\n    );\n  }\n\n  private mergeBuildFunctionsWithExternal(\n    configFunctions: BuildFunctionById,\n    externalFunctions?: BuildFunction[]\n  ): BuildFunctionById {\n    const result: BuildFunctionById = { ...configFunctions };\n    if (externalFunctions === undefined) {\n      return result;\n    }\n    for (const buildFunction of externalFunctions) {\n      // functions defined in config shadow the external ones\n      const fullId = buildFunction.getFullId();\n      if (!(fullId in result)) {\n        result[fullId] = buildFunction;\n      }\n    }\n    return result;\n  }\n\n  private validateExternalFunctions(externalFunctions?: BuildFunction[]): void {\n    if (externalFunctions === undefined) {\n      return;\n    }\n    const externalFunctionIds = externalFunctions.map((f) => f.getFullId());\n    const duplicatedExternalFunctionIds = duplicates(externalFunctionIds);\n    if (duplicatedExternalFunctionIds.length === 0) {\n      return;\n    }\n    throw new BuildStepRuntimeError(\n      `Provided external functions with duplicated IDs: ${duplicatedExternalFunctionIds\n        .map((id) => `\"${id}\"`)\n        .join(', ')}`\n    );\n  }\n\n  private getExternalFunctionFullIds(): string[] {\n    if (this.externalFunctions === undefined) {\n      return [];\n    }\n    const ids = this.externalFunctions.map((f) => f.getFullId());\n    return uniq(ids);\n  }\n}\n"]}