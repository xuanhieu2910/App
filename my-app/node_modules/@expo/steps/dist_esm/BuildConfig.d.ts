import Joi from 'joi';
import { BuildRuntimePlatform } from './BuildRuntimePlatform.js';
import { BuildStepInputValueType, BuildStepInputValueTypeName } from './BuildStepInput.js';
export type BuildFunctions = Record<string, BuildFunctionConfig>;
interface BuildFunctionsConfigFile {
    configFilesToImport?: string[];
    functions?: BuildFunctions;
}
export interface BuildConfig extends BuildFunctionsConfigFile {
    build: {
        name?: string;
        steps: BuildStepConfig[];
    };
}
export type BuildStepConfig = BuildStepCommandRun | BuildStepBareCommandRun | BuildStepFunctionCall | BuildStepBareFunctionCall;
export type BuildStepCommandRun = {
    run: BuildFunctionCallConfig & {
        outputs?: BuildStepOutputs;
        command: string;
    };
};
export type BuildStepBareCommandRun = {
    run: string;
};
export type BuildStepFunctionCall = {
    [functionId: string]: BuildFunctionCallConfig;
};
export type BuildStepBareFunctionCall = string;
export type BuildFunctionCallConfig = {
    id?: string;
    inputs?: BuildStepInputs;
    name?: string;
    workingDirectory?: string;
    shell?: string;
};
export type BuildStepInputs = Record<string, BuildStepInputValueType>;
export type BuildStepOutputs = (string | {
    name: string;
    required?: boolean;
})[];
export interface BuildFunctionConfig {
    inputs?: BuildFunctionInputs;
    outputs?: BuildFunctionOutputs;
    name?: string;
    supportedRuntimePlatforms?: BuildRuntimePlatform[];
    shell?: string;
    command: string;
}
export type BuildFunctionInputs = (string | {
    name: string;
    defaultValue?: BuildStepInputValueType;
    allowedValues?: BuildStepInputValueType[];
    required?: boolean;
    allowedValueType: BuildStepInputValueTypeName;
})[];
export type BuildFunctionOutputs = BuildStepOutputs;
export declare const BuildFunctionsConfigFileSchema: Joi.ObjectSchema<BuildFunctionsConfigFile>;
export declare const BuildConfigSchema: Joi.ObjectSchema<BuildConfig>;
interface BuildConfigValidationParams {
    externalFunctionIds?: string[];
    skipNamespacedFunctionsCheck?: boolean;
}
export declare function readAndValidateBuildConfigAsync(configPath: string, params?: BuildConfigValidationParams): Promise<BuildConfig>;
export declare function readAndValidateBuildFunctionsConfigFileAsync(configPath: string): Promise<BuildFunctionsConfigFile>;
export declare function readRawBuildConfigAsync(configPath: string): Promise<any>;
export declare function validateConfig<T>(schema: Joi.ObjectSchema<T>, config: object, configFilePath?: string): T;
export declare function mergeConfigWithImportedFunctions(config: BuildConfig, importedFunctions: BuildFunctions): void;
export declare function isBuildStepCommandRun(step: BuildStepConfig): step is BuildStepCommandRun;
export declare function isBuildStepBareCommandRun(step: BuildStepConfig): step is BuildStepBareCommandRun;
export declare function isBuildStepFunctionCall(step: BuildStepConfig): step is BuildStepFunctionCall;
export declare function isBuildStepBareFunctionCall(step: BuildStepConfig): step is BuildStepBareFunctionCall;
export declare function validateAllFunctionsExist(config: BuildConfig, { externalFunctionIds, skipNamespacedFunctionsCheck }: BuildConfigValidationParams): void;
export {};
