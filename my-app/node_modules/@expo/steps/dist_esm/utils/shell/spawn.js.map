{"version":3,"file":"spawn.js","sourceRoot":"","sources":["../../../src/utils/shell/spawn.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAoB,MAAM,cAAc,CAAC;AACjE,OAAO,kBAIN,MAAM,mBAAmB,CAAC;AAQ3B,sDAAsD;AACtD,MAAM,UAAU,UAAU,CACxB,OAAe,EACf,IAAc,EACd,aAA2B;IACzB,KAAK,EAAE,SAAS;IAChB,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE;CACnB;IAED,MAAM,EAAE,MAAM,EAAE,GAAG,OAAO,EAAE,GAAG,UAAU,CAAC;IAC1C,IAAI,MAAM,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,MAAM,CAAC;KACxB;IACD,MAAM,OAAO,GAAG,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3D,IAAI,MAAM,IAAI,OAAO,CAAC,KAAK,EAAE;QAC3B,eAAe,CAAC,MAAM,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;KACjD;IACD,OAAO,OAAO,CAAC;AACjB,CAAC","sourcesContent":["import { pipeSpawnOutput, bunyan, PipeMode } from '@expo/logger';\nimport spawnAsyncOriginal, {\n  SpawnResult,\n  SpawnPromise,\n  SpawnOptions as SpawnOptionsOriginal,\n} from '@expo/spawn-async';\n\ntype SpawnOptions = SpawnOptionsOriginal & {\n  logger?: bunyan;\n  lineTransformer?: (line: string) => string | null;\n  mode?: PipeMode;\n};\n\n// eslint-disable-next-line async-protect/async-suffix\nexport function spawnAsync(\n  command: string,\n  args: string[],\n  allOptions: SpawnOptions = {\n    stdio: 'inherit',\n    cwd: process.cwd(),\n  }\n): SpawnPromise<SpawnResult> {\n  const { logger, ...options } = allOptions;\n  if (logger) {\n    options.stdio = 'pipe';\n  }\n  const promise = spawnAsyncOriginal(command, args, options);\n  if (logger && promise.child) {\n    pipeSpawnOutput(logger, promise.child, options);\n  }\n  return promise;\n}\n"]}