"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maybePrintBuildProfileDeprecationWarningsAsync = exports.clearHasPrintedDeprecationWarnings = exports.getProfilesAsync = void 0;
const tslib_1 = require("tslib");
const eas_json_1 = require("@expo/eas-json");
const log_1 = tslib_1.__importStar(require("../log"));
async function getProfilesAsync({ easJsonAccessor, platforms, profileName, type, }) {
    const results = platforms.map(async function (platform) {
        const profile = await readProfileAsync({
            easJsonAccessor,
            platform,
            type,
            profileName,
        });
        return {
            profile,
            profileName: profileName !== null && profileName !== void 0 ? profileName : 'production',
            platform,
        };
    });
    return await Promise.all(results);
}
exports.getProfilesAsync = getProfilesAsync;
async function readProfileAsync({ easJsonAccessor, platform, type, profileName, }) {
    if (type === 'build') {
        const buildProfile = await eas_json_1.EasJsonUtils.getBuildProfileAsync(easJsonAccessor, platform, profileName);
        await maybePrintBuildProfileDeprecationWarningsAsync(easJsonAccessor, platform, profileName);
        return buildProfile;
    }
    else {
        return (await eas_json_1.EasJsonUtils.getSubmitProfileAsync(easJsonAccessor, platform, profileName));
    }
}
let hasPrintedDeprecationWarnings = false;
/**
 * Only for testing purposes
 */
function clearHasPrintedDeprecationWarnings() {
    hasPrintedDeprecationWarnings = false;
}
exports.clearHasPrintedDeprecationWarnings = clearHasPrintedDeprecationWarnings;
async function maybePrintBuildProfileDeprecationWarningsAsync(easJsonAccessor, platform, profileName) {
    if (hasPrintedDeprecationWarnings) {
        return;
    }
    const deprecationWarnings = await eas_json_1.EasJsonUtils.getBuildProfileDeprecationWarningsAsync(easJsonAccessor, platform, profileName !== null && profileName !== void 0 ? profileName : 'production');
    if (deprecationWarnings.length === 0) {
        return;
    }
    log_1.default.newLine();
    log_1.default.warn('Detected deprecated fields in eas.json:');
    for (const warning of deprecationWarnings) {
        const warnlog = warning.message.map(line => `\t${line}`).join('\n');
        log_1.default.warn(warnlog);
        if (warning.docsUrl) {
            log_1.default.warn(`\t${(0, log_1.learnMore)(warning.docsUrl)}`);
        }
        log_1.default.newLine();
    }
    hasPrintedDeprecationWarnings = true;
}
exports.maybePrintBuildProfileDeprecationWarningsAsync = maybePrintBuildProfileDeprecationWarningsAsync;
