"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSessionUsingBrowserAuthFlowAsync = void 0;
const tslib_1 = require("tslib");
const better_opn_1 = tslib_1.__importDefault(require("better-opn"));
const http_1 = tslib_1.__importDefault(require("http"));
const querystring_1 = tslib_1.__importDefault(require("querystring"));
const log_1 = tslib_1.__importDefault(require("../log"));
async function getSessionUsingBrowserAuthFlowAsync(options) {
    const { expoWebsiteUrl, serverPort } = options;
    if (!expoWebsiteUrl || !serverPort) {
        throw new Error('Expo website URL and local server port are required.');
    }
    const scheme = 'http';
    const hostname = 'localhost';
    const path = '/auth/callback';
    const redirectUri = `${scheme}://${hostname}:${serverPort}${path}`;
    const buildExpoSsoLoginUrl = () => {
        const data = {
            app_redirect_uri: redirectUri,
        };
        const params = querystring_1.default.stringify(data);
        return `${expoWebsiteUrl}/sso-login?${params}`;
    };
    // Start server and begin auth flow
    const executeAuthFlow = () => {
        return new Promise(async (resolve, reject) => {
            const connections = new Set();
            const server = http_1.default.createServer((request, response) => {
                var _a;
                try {
                    if (!(request.method === 'GET' && ((_a = request.url) === null || _a === void 0 ? void 0 : _a.includes('/auth/callback')))) {
                        throw new Error('Unexpected SSO login response.');
                    }
                    const url = new URL(request.url, `http:${request.headers.host}`);
                    const sessionSecret = url.searchParams.get('session_secret');
                    if (!sessionSecret) {
                        throw new Error('Request missing session_secret search parameter.');
                    }
                    resolve(sessionSecret);
                    response.writeHead(200, { 'Content-Type': 'text/plain' });
                    response.write(`Website login has completed. You can now close this tab.`);
                    response.end();
                }
                catch (error) {
                    reject(error);
                }
                finally {
                    server.close();
                    // Ensure that the server shuts down
                    for (const connection of connections) {
                        connection.destroy();
                    }
                }
            });
            server.listen(serverPort, hostname, () => {
                log_1.default.log('Waiting for browser login...');
            });
            server.on('connection', connection => {
                connections.add(connection);
                connection.on('close', () => {
                    connections.delete(connection);
                });
            });
            const authorizeUrl = buildExpoSsoLoginUrl();
            (0, better_opn_1.default)(authorizeUrl);
        });
    };
    return await executeAuthFlow();
}
exports.getSessionUsingBrowserAuthFlowAsync = getSessionUsingBrowserAuthFlowAsync;
